plugins {
   id("us.ihmc.ihmc-build") version "0.21.0"
   id("us.ihmc.ihmc-ci") version "5.3"
   id("us.ihmc.ihmc-cd") version "1.14"
   id("us.ihmc.log-tools-plugin") version "0.5.0"
   id("org.hidetake.ssh") version "2.1.1"
}

import org.gradle.api.GradleException

ihmc {
   //loadProductProperties("../product.properties")

   configureDependencyResolution()
   configurePublications()
}

mainDependencies {
   api("us.ihmc:euclid-frame:0.15.1")
   api("us.ihmc:euclid-shape:0.15.1")
   api("us.ihmc:ihmc-yovariables:0.9.3")
   api("org.ejml:ejml-ddense:0.39")
   api("org.ejml:ejml-core:0.39")
   api("net.sf.trove4j:trove4j:3.0.3")
   api("com.thoughtworks.xstream:xstream:1.4.7")
   api("us.ihmc:ihmc-communication:source")
   api("us.ihmc:ihmc-common-walking-control-modules:source")
   api("us.ihmc:ihmc-robot-models:source")
   api("us.ihmc:ihmc-sensor-processing:source")
   api("us.ihmc:ihmc-humanoid-robotics:source")
   api("us.ihmc:ihmc-humanoid-behaviors:source")
   api("us.ihmc:ihmc-avatar-interfaces:source")
   api("us.ihmc:simulation-construction-set:0.20.5")
   api("us.ihmc:ihmc-state-estimation:source")
   api("us.ihmc:atlas:source")
   api("us.ihmc:ihmc-java-toolkit:source")
   api("us.ihmc:ihmc-robotics-toolkit:source")
   api("us.ihmc:ihmc-graphics-description:0.19.1")
   api("us.ihmc:ihmc-simulation-toolkit:source")
}

oldgdxDependencies {
   api(ihmc.sourceSetProject("main"))
   api("com.badlogicgames.gdx:gdx-bullet-platform:1.9.4:natives-desktop")
   api("com.badlogicgames.gdx:gdx-bullet:1.9.4")
}


if (ihmc.isBuildRoot())
{
   remotes {
      testbed {
         host = '10.7.4.50'

         // Set the username and password in ~/.gradle/gradle.properties.
         user = project.hasProperty('testbed_username') ? "${testbed_username}" : "invalid"
         password = project.hasProperty('testbed_password') ? "${testbed_password}" : "invalid"

         knownHosts = allowAnyHosts
      }
   }

   task deploy(dependsOn: ['jar']) {
      ihmc.jarWithLibFolder()
      def projectDir = project.buildscript.sourceFile.parent
      def directory = 'testbed'

      doLast {
         if (!project.hasProperty('testbed_username') || !project.hasProperty('testbed_password'))
         {
            throw new GradleException("Please set testbed_username and testbed_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
         }

         ssh.run {
            session(remotes.testbed) {
               execute("mkdir -p " + directory + "/lib")

               configurations.runtime.each {
                  put it, directory + '/lib'
               }

               put jar.archivePath, directory + '/testbed.jar'

               def scriptDir = new File(projectDir, "launchScripts")
               def scriptDirCollection = files { scriptDir.listFiles() }
               put scriptDirCollection, directory

               scriptDirCollection.each {
                  execute 'chmod 777 ' + directory + '/' + it.name
               }
            }
         }
      }
   }
}